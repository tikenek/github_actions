name: 'Terraform-apply'

on:
  push:
    branches:
      - master
      
#    paths:
#    - 'your folder's name here/**'
#    - '.github/workflows/terraform.yml'
#  pull_request:
#    paths:
#    - 'your folder name here/**'
#    - '.github/workflows/terraform.yml'
#env:
#    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#    AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}

 
jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted 
#    environment:  #Here is the name of your environment
   
        
    steps:
    # Checkout the repository 
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
        
    # Install nodejs
    - uses: actions/setup-node@v2
      with:
          node-version: '14'
  
    #Will run linters and search for possible errors
    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v1
      name: Setup TFLint
      with:
        tflint_version: v0.29.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact
        
    # Install Terraform CLI and configure the Terraform CLI configuration file
    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v1
  
    # Initialize working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init 
    
    # Checks that all Terraform configuration files adhere to a canonical format and style
    - name: Terraform Format
      id: fmt
      run: terraform fmt 
    
    # Validates the configuration
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
  
    # Evaluates and generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      
   
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
        id: setup_py

    - name: Install Checkov
      id: checkov
      run: |
        python3 -m pip3 install --upgrade pip3
        pip3 install checkov
      continue-on-error: true

    - name: Run Checkov
      id: run_checkov
      run: checkov -f tfplan.json -o sarif -s
      continue-on-error: true

    - name: Upload SARIF file
      id: upload_sarif
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: results.sarif
        category: checkov
        continue-on-error: true
        
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
      

